// Vitest Snapshot v1

exports[`question > question > question 1`] = `
{
  "category": "algorithms",
  "difficulty": "Easy",
  "id": 1,
  "link": "/algorithms/array/001",
  "name": "Two Sum",
  "origin": "https://leetcode.cn/problems/two-sum",
  "tag": "array",
  "title": "two-sum",
}
`;

exports[`question > rawQuestion > rawQuestion 1`] = `
{
  "categoryTitle": "Algorithms",
  "codeSnippets": [
    {
      "code": "class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        
    }
};",
      "lang": "C++",
    },
    {
      "code": "class Solution {
    public int[] twoSum(int[] nums, int target) {

    }
}",
      "lang": "Java",
    },
    {
      "code": "class Solution(object):
    def twoSum(self, nums, target):
        \\"\\"\\"
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        \\"\\"\\"",
      "lang": "Python",
    },
    {
      "code": "class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:",
      "lang": "Python3",
    },
    {
      "code": "

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* twoSum(int* nums, int numsSize, int target, int* returnSize){

}",
      "lang": "C",
    },
    {
      "code": "public class Solution {
    public int[] TwoSum(int[] nums, int target) {

    }
}",
      "lang": "C#",
    },
    {
      "code": "/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[]}
 */
var twoSum = function(nums, target) {

};",
      "lang": "JavaScript",
    },
    {
      "code": "# @param {Integer[]} nums
# @param {Integer} target
# @return {Integer[]}
def two_sum(nums, target)

end",
      "lang": "Ruby",
    },
    {
      "code": "class Solution {
    func twoSum(_ nums: [Int], _ target: Int) -> [Int] {

    }
}",
      "lang": "Swift",
    },
    {
      "code": "func twoSum(nums []int, target int) []int {

}",
      "lang": "Go",
    },
    {
      "code": "object Solution {
    def twoSum(nums: Array[Int], target: Int): Array[Int] = {

    }
}",
      "lang": "Scala",
    },
    {
      "code": "class Solution {
    fun twoSum(nums: IntArray, target: Int): IntArray {

    }
}",
      "lang": "Kotlin",
    },
    {
      "code": "impl Solution {
    pub fn two_sum(nums: Vec<i32>, target: i32) -> Vec<i32> {

    }
}",
      "lang": "Rust",
    },
    {
      "code": "class Solution {

    /**
     * @param Integer[] $nums
     * @param Integer $target
     * @return Integer[]
     */
    function twoSum($nums, $target) {

    }
}",
      "lang": "PHP",
    },
    {
      "code": "function twoSum(nums: number[], target: number): number[] {

};",
      "lang": "TypeScript",
    },
    {
      "code": "(define/contract (two-sum nums target)
  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))

  )",
      "lang": "Racket",
    },
    {
      "code": "-spec two_sum(Nums :: [integer()], Target :: integer()) -> [integer()].
two_sum(Nums, Target) ->
  .",
      "lang": "Erlang",
    },
    {
      "code": "defmodule Solution do
  @spec two_sum(nums :: [integer], target :: integer) :: [integer]
  def two_sum(nums, target) do

  end
end",
      "lang": "Elixir",
    },
    {
      "code": "class Solution {
  List<int> twoSum(List<int> nums, int target) {

  }
}",
      "lang": "Dart",
    },
  ],
  "content": "<p>Given an array of integers <code>nums</code>&nbsp;and an integer <code>target</code>, return <em>indices of the two numbers such that they add up to <code>target</code></em>.</p>

<p>You may assume that each input would have <strong><em>exactly</em> one solution</strong>, and you may not use the <em>same</em> element twice.</p>

<p>You can return the answer in any order.</p>

<p>&nbsp;</p>
<p><strong class=\\"example\\">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [2,7,11,15], target = 9
<strong>Output:</strong> [0,1]
<strong>Explanation:</strong> Because nums[0] + nums[1] == 9, we return [0, 1].
</pre>

<p><strong class=\\"example\\">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [3,2,4], target = 6
<strong>Output:</strong> [1,2]
</pre>

<p><strong class=\\"example\\">Example 3:</strong></p>

<pre>
<strong>Input:</strong> nums = [3,3], target = 6
<strong>Output:</strong> [0,1]
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>2 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>
	<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>
	<li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li>
	<li><strong>Only one valid answer exists.</strong></li>
</ul>

<p>&nbsp;</p>
<strong>Follow-up:&nbsp;</strong>Can you come up with an algorithm that is less than&nbsp;<code>O(n<sup>2</sup>)&nbsp;</code>time complexity?",
  "difficulty": "Easy",
  "exampleTestcases": "[2,7,11,15]
9
[3,2,4]
6
[3,3]
6",
  "questionId": "1",
  "title": "Two Sum",
  "titleSlug": "two-sum",
  "topicTags": [
    {
      "slug": "array",
      "translatedName": "数组",
    },
    {
      "slug": "hash-table",
      "translatedName": "哈希表",
    },
  ],
}
`;

exports[`question > resolvedQuestion > resolvedQuestion 1`] = `
{
  "category": "algorithms",
  "code": "function twoSum(nums: number[], target: number): number[] {

};",
  "content": "<p>Given an array of integers <code>nums</code>&nbsp;and an integer <code>target</code>, return <em>indices of the two numbers such that they add up to <code>target</code></em>.</p>

<p>You may assume that each input would have <strong><em>exactly</em> one solution</strong>, and you may not use the <em>same</em> element twice.</p>

<p>You can return the answer in any order.</p>

<p>&nbsp;</p>
<p><strong class=\\"example\\">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [2,7,11,15], target = 9
<strong>Output:</strong> [0,1]
<strong>Explanation:</strong> Because nums[0] + nums[1] == 9, we return [0, 1].
</pre>

<p><strong class=\\"example\\">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [3,2,4], target = 6
<strong>Output:</strong> [1,2]
</pre>

<p><strong class=\\"example\\">Example 3:</strong></p>

<pre>
<strong>Input:</strong> nums = [3,3], target = 6
<strong>Output:</strong> [0,1]
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>2 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>
	<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>
	<li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li>
	<li><strong>Only one valid answer exists.</strong></li>
</ul>

<p>&nbsp;</p>
<strong>Follow-up:&nbsp;</strong>Can you come up with an algorithm that is less than&nbsp;<code>O(n<sup>2</sup>)&nbsp;</code>time complexity?",
  "difficulty": "Easy",
  "functionName": "twoSum",
  "lang": "typescript",
  "origin": "https://leetcode.cn/problems/two-sum",
  "outFiles": [],
  "path": "algorithms/array/001",
  "questionId": "1",
  "tag": "array",
  "testcases": [
    {
      "expect": "[2,7,11,15]",
      "toBe": "9",
    },
    {
      "expect": "[3,2,4]",
      "toBe": "6",
    },
    {
      "expect": "[3,3]",
      "toBe": "6",
    },
  ],
  "title": "Two Sum",
  "titleSlug": "two-sum",
}
`;
